http://linux.vbird.org/
1包含文件：
source 文件
2设置环境变量
setenv 变量名 值
3取得输入参数
第一个$1
第二个$2
4取得输入参数个数
$#argv
5打印:
echo “XXXXXX”
6正常结束
exit(0)
7异常结束
exit(1)
8定义变量
set 变量名=XXXXXX
9调用变量
$变量名 �D�D调用程序变量
${变量名}�D�D调用环境变量
10调用sql
参考/db/oracle/callsql.sh
11分支语句
if (a==b) then
XXXX
else
  XXXX
endif
12循环语句
#!/bin/csh
set str = "aaa bbb ccc ddd"
foreach str_temp ($str)
    echo $ str_temp
end
#!/bin/sh
for i in `seq 5`
do
  echo $i
done

for str in bbb ccc ddd
do
  echo $str
done

COUNTER=0
while [ $COUNTER -lt 5 ] 
do
	COUNTER=`expr $COUNTER + 1`
	echo $COUNTER
done

COUNTER=0
until [ $COUNTER -gt 5 ] 
do
	COUNTER=`expr $COUNTER + 1`
	echo $COUNTER
done  
13别名
alias  变量名 ‘字符串’
注意：字符串用“\!*”表示一个可传入的参数，
例：alias print 'echo \!*'
    print hello,world
14分step
程序名_STP01:
set stepName =程序名_STP01
'echo \!* `date "+%Y/%m/%d %H:%M:%S"` STEP-START'
XXXXX
'echo \!* `date "+%Y/%m/%d %H:%M:%S"` STEP-END'
15``和$()
  命令行调用``或$()，$()中可以包含``

16.shell连接sybase
source /opt/sybclient-15.0/sybash.sh
rs=`isql -S ** -U ** -P ** <<EOF
use datebase
go
...
...
go
quit
EOF`
echo $rs
注：EOF中间每行前面不能有空格

17.linux支持的语系
locale -a
默认语系
/etc/sysconfig/i18n

18.shell变量定义
declare [-aixr] ***
-a	array
-i	integer
-x	环境
-r	只读

19.删除字符串
删除最短数据
${变量#关键字}
例${PATH#/*:}

删除最长数据
${变量}##/*:}
例${PATH##/*:}

从尾部删除最短数据
${变量%关键字}
例${PATH%:*bin}

从尾部删除最长数据
${变量%%关键字}
例${PATH%%:*bin}

20.替换字符串
替换一个字符串
${变量/新字符/旧字符}
替换多个字符串
${变量//新字符/旧字符}

21.判断字符串
			str没有设置		str空			str已设置非空
var=${str-expr}		var=expr		var=			var=$str
var=${str:-expr}	var=expr		var=expr		var=$str
var=${str+expr}		var=			var=expr		var=expr
var=${str:+expr}	var=			var=			var=expr
var=${str=expr}		str=expr;var=expr	str不变;var=		str不变;var=$str
var=${str:=expr}	str=expr;var=expr	str=expr;var=expr	str不变;var=$str
var=${str?expr}		expr输出至stderr	var=			var=$srt
var=${str:?expr}	expr输出至stderr	expr输出至stderr	var=$srt

22.别名
alias	unalias

23.bash登录与欢迎信息
/etc/issue	/etc/motd

24.bash环境配置文件
/etc/profile	整体设置，不要修改
~/.bash_profile	~/.bash_login	~/.profile	个人配置文件

25.set设置
set -u	若使用未定义变量时，则显示错误信息
set -v	执行前，显示该命令内容，用于调试

26.数据流重定向
输出
find /home -name .bashrc > list_right 2 > list_error
不显示错误信息
find /home -name .bashrc 2 > /dev/null
全部写入
find /home -name .bashrc > list 2 > &1
find /home -name .bashrc &> list		同上

输入
复制.bashrc->catfile
cat > catfile < ~/.bashrc
输入"eof"结束
cat > catfile <<"eof"

27.命令执行的判定
ls /temp/abc || mkdir /temp/abc && touch /tmp/abc/hehe
ls /temp/vbirding && echo "exist" || echo "not exist"

28.管道命令
例: ls -al /etc | less

29.cut
echo $PATH | cut -d':' -f1,3
$PATH以':'分割，列出第一和第三个

export | cut -c12-
export排除第12列字符以前的

export | cut -c1-7
export第一到七个字符

last | cut -d' ' -f1
显示登录者信息，只留大名

30.grep
last | grep 'root'
列出root用户登录信息

last | grep -v 'root'
列出除root用户以外的用户登录信息

last | grep 'root' | cut -d ' ' -f1
列出root用户登录信息，只列大名

grep --color=auto 'MANPATH' /etc/man.config

31.sort
cat /etc/passwd | sort
cat /etc/passwd | sort -t':' -k3
按第三列排序
last | cut -d' ' -f1 | sort
取登录账号名并排序

32.uniq
last | cut -d' ' -f1 | sort | uniq
=group by
last | cut -d' ' -f1 | sort | uniq -c
列出重复次数（登录次数）

33.wc
cat /etc/man.config |wc
字，行，字节数

last | grep [a-zA-Z] | grep -v 'wtmp' | wc -l
系统登录总人数

34.双向重定向tee -a表示追加
last | tee last.list | cut -d " " -f1
将 last 的输出存一份到 last.list 档案中
ls -l /home | tee ~/homefile | more
将 ls 的资料存一份到 ~/homefile ，同时萤幕也有输出讯息
 ls -l / | tee -a ~/homefile | more
tee 后接的档案会被覆盖，所以，我们要加上 -a 这个参数才能将讯息累加

35.字符转换命令
tr:
last | tr '[a-z]' '[A-Z]'
大小写转换
cat /etc/passwd | tr -d':'
删除':'显示

36.col
cat /etc/man.config | col -x | cat -A | more
col -x	空格替换tab键
cat -A	显示特殊字符

37.join
join -t ':' -1 4 1.txt -2 3 2.txt
-1表示第一个文件1.txt
-2表示第二个文件2.txt
4表示第4列
3表示第3列
把第一个文件第4列和第二个文件第3列相同的列出来

38.paste
paste /etc/passwd /etc/shadow
cat /etc/group | paste /etc/passwd /etc/shadow -|head -n 3
-表示stdin

39.expand
    expand

�@玩意�壕褪窃�� [tab] 按�I�D成空白�I啦～可以�@�油妫�

[root@www ~]# expand [-t] file
�x��c��担�
-t  ：後面可以接�底帧Ｒ话�碚f，一�� tab 按�I可以用 8 ��空白�I取代。
      我��也可以自行定�x一�� [tab] 按�I代表多少��字元呢！

�例一：�� /etc/man.config �刃惺�� MANPATH 的字�泳腿〕觯�H取前三行；
[root@www ~]# grep '^MANPATH' /etc/man.config | head -n 3
MANPATH /usr/man
MANPATH /usr/share/man
MANPATH /usr/local/man
# 行首的代表�苏I�� ^ ，�@��我��留待下�介�B！先有概念即可！

�例二：承上，如果我想要�⑺�有的符�都列出�恚�(用 cat)
[root@www ~]# grep '^MANPATH' /etc/man.config | head -n 3 |cat -A
MANPATH^I/usr/man$
MANPATH^I/usr/share/man$
MANPATH^I/usr/local/man$
# �l�F差�e了�幔�]�e～ [tab] 按�I可以被 cat -A �@示成�� ^I 

�例三：承上，我�� [tab] 按�I�O定成 6 ��字元的�？
[root@www ~]# grep '^MANPATH' /etc/man.config | head -n 3 | \
>  expand -t 6 - | cat -A
MANPATH     /usr/man$
MANPATH     /usr/share/man$
MANPATH     /usr/local/man$
123456123456123456.....
# 仔�看一下上面的�底终f明，因�槲沂且� 6 ��字元�泶�表一�� [tab] 的�L度，所以，
# MAN... 到 /usr 之�g��隔 12 (��� [tab]) ��字元喔！如果 tab 改成 9 的�，
# 情�r就又不同了！�@�e也不好理解～您可以多�O定����底�聿殚�就�缘茫�

expand 也是挺好玩的～他��自��� [tab] �D成空白�I～所以，以上面的例子�碚f， 使用 cat -A 就��查不到 ^I 的字符�印�此外，因�� [tab] 最大的功能就是格式排列整�R！ 我���D成空白�I後，�@��空白�I也��依��我��自己的定�x�碓黾哟笮　� 所以，�K不是一�� ^I 就���Q成 8 ��空白喔！�@��地方要特�e注意的哩！ 此外，您也可以�⒖家幌� unexpand �@���⒖瞻邹D成 [tab] 的指令功能

40.分割命令： split

如果你有�n案太大，�е乱恍�y��式�b置�o法�}�u的���}，嘿嘿！找 split 就�α耍� 他可以�湍�⒁��大�n案，依���n案大小或行��矸指睿�就可以�⒋�n案分割成�樾�n案了！ 快速又有效啊！真不�e～

[root@www ~]# split [-bl] file PREFIX
�x��c��担�
-b  ：後面可接欲分割成的�n案大小，可加�挝唬�例如 b, k, m 等；
-l  ：以行��磉M行分割。
PREFIX ：代表前置字元的意思，可作�榉指�n案的前��文字。

�例一：我的 /etc/termcap 有七百多K，若想要分成 300K 一���n案�r？
[root@www ~]# cd /tmp; split -b 300k /etc/termcap termcap
[root@www tmp]# ll -k termcap*
-rw-r--r-- 1 root root 300 Feb  7 16:39 termcapaa
-rw-r--r-- 1 root root 300 Feb  7 16:39 termcapab
-rw-r--r-- 1 root root 189 Feb  7 16:39 termcapac
# 那���n名可以�S意取的啦！我��只要��上前��文字，小�n案就��以
# xxxaa, xxxab, xxxac 等方式�斫�立小�n案的！

�例二：如何�⑸厦娴娜���小�n案合成一���n案，�n名�� termcapback
[root@www tmp]# cat termcap* >> termcapback
# 很��伟桑烤陀觅Y料流重��向就好啦！��危�

�例三：使用 ls -al / �出的�Y�中，每十行��成一���n案
[root@www tmp]# ls -al / | split -l 10 - lsroot
[root@www tmp]# wc -l lsroot*
  10 lsrootaa
  10 lsrootab
   6 lsrootac
  26 total
# 重�c在那�� - 啦！一般�碚f，如果需要 stdout/stdin �r，但偏偏又�]有�n案，
# 有的只是 - �r，那�N那�� - 就��被��成 stdin 或 stdout ～

在 Windows 作�I系�y下，你要��n案分割需要如何作？���X筋吧！在 Linux 底下就��蔚亩嗔耍∧阋���n案分割的�，那�N就使用 -b size ��⒁��分割的�n案限制其大小，如果是行�档脑�，那�N就使用 -l line �矸指睿『糜玫暮埽∪绱艘�恚�你就可以�p易的�⒛愕�n案分割成�碟 (floppy) 的大小，方便你 copy �樱�

41.��荡��Q： xargs

xargs 是在做什�N的呢？就以字面上的意�x�砜矗� x 是加�p乘除的乘�，args �t是 arguments (���) 的意思，所以�f，�@��玩意�壕褪窃诋a生某��指令的��档囊馑迹� xargs 可以�x入 stdin 的�Y料，�K且以空白字元或�嘈凶衷�作�榉直妫��� stdin 的�Y料分隔成�� arguments 。 因�槭且钥瞻鬃衷�作�榉指簦�所以，如果有一些�n名或者是其他意�x的名�~�群�有空白字元的�r候， xargs 可能就���`判了～他的用法其��也��M��蔚模【�砜匆豢聪龋�

[root@www ~]# xargs [-0epn] command
�x��c��担�
-0  ：如果�入的 stdin 含有特殊字元，例如 `, \, 空白�I等等字元�r，�@�� -0 ���
      可以�⑺��原成一般字元。�@����悼梢杂渺短厥��B喔！
-e  ：�@��是 EOF (end of file) 的意思。後面可以接一��字串，�� xargs 分析到
      �@��字串�r，就��停止�^�m工作！
-p  ：在�绦忻��指令的 argument �r，都�����使用者的意思；
-n  ：後面接次�担�每次 command 指令�绦�r，要使用�����档囊馑肌？垂�例三。
�� xargs 後面�]有接任何的指令�r，�A�O是以 echo �磉M行�出喔！

�例一：�� /etc/passwd �鹊牡谝�谌〕觯��H取三行，使用 finger �@��指令�⒚��
        �ぬ��热菪愠��
[root@www ~]# cut -d':' -f1 /etc/passwd |head -n 3| xargs finger
Login: root                             Name: root
Directory: /root                        Shell: /bin/bash
Never logged in.
No mail.
No Plan.
......底下省略.....
# 由 finger account 可以取得��ぬ�的相�P�f明�热荩�例如上面的�出就是 finger root
# 後的�Y果。在�@��例子��中，我��利用 cut 取出�ぬ�名�Q，用 head 取出三���ぬ�，
# 最後�t是由 xargs �⑷����ぬ�的名�Q�成 finger 後面需要的��担�

�例二：同上，但是每次�绦� finger �r，都要���使用者是否�幼鳎�
[root@www ~]# cut -d':' -f1 /etc/passwd |head -n 3| xargs -p finger
finger root bin daemon ?...y
.....(底下省略)....
# 呵呵！�@�� -p 的�x�可以�使用者的使用�^程中，被���到每��指令是否�绦校�

�例三：�⑺�有的 /etc/passwd �鹊�ぬ�都以 finger 查�，但一次�H查�五���ぬ�
[root@www ~]# cut -d':' -f1 /etc/passwd | xargs -p -n 5 finger
finger root bin daemon adm lp ?...y
.....(中�g省略)....
finger uucp operator games gopher ftp ?...y
.....(底下省略)....
# 在�@�e�B哥使用了 -p �@�����碜�您��於 -n 更有概念。一般�碚f，某些指令後面
# 可以接的 arguments 是有限制的，不能�o限制的累加，此�r，我��可以利用 -n
# ��椭�我�����捣殖���部分，每��部分分�e再以指令��绦校∵@�泳� OK 啦！^_^

�例四：同上，但是��分析到 lp 就�Y束�@串指令？
[root@www ~]# cut -d':' -f1 /etc/passwd | xargs -p -e'lp' finger
finger root bin daemon adm ?...
# 仔��c上面的案例做比�^。也同�r注意，那�� -e'lp' 是�B在一起的，中�g�]有空白�I。
# 上��例子��中，第五����凳� lp 啊，那�N我��下�_ -e'lp' 後，�t分析到 lp
# �@��字串�r，後面的其他 stdin 的�热菥��被 xargs ���掉了！

其��，在 man xargs �e面就有三四��小�例，您可以自行�⒖家幌�热荨� 此外， xargs 真的是很好用的一��玩意�海∧�真的需要好好的�⒃��⒃�！��使用 xargs 的原因是， 很多指令其���K不支援管�命令，因此我��可以透�^ xargs �硖峁┰�指令引用 standard input 之用！�e例�碚f，我��使用如下的�例�碚f明：

�例五：找出 /sbin 底下具有特殊�嘞薜�n名，�K使用 ls -l 列出���傩�
[root@www ~]# find /sbin -perm +7000 | ls -l
# �Y果竟然�H有列出 root 所在目�下的�n案！�@不是我��要的！
# 因�� ll (ls) �K不是管�命令的原因啊！

[root@www ~]# find /sbin -perm +7000 | xargs ls -l
-rwsr-xr-x 1 root root 70420 May 25  2008 /sbin/mount.nfs
-rwsr-xr-x 1 root root 70424 May 25  2008 /sbin/mount.nfs4
-rwxr-sr-x 1 root root  5920 Jun 15  2008 /sbin/netreport
....(底下省略)....


42.安全代码
IFs=$' \t\n'
unset -f unalias		#unalias -f 无效（函数）
unset -f command		#command -f 无效（函数）

SYSPATH="$(command -p getconf PATH 2>/dev/null)"
if [[ -z "$SYSPATH" ]];then
	SYSPATH="/usr/bin:/bin"
fi
PATH="$SYSPATH:$PATH"


43.删除第一行和最后一行
sed 1d file
sed $d file

44.bash调用bcp,isql
SYBASE_SH=sybase目录/SYBASE.sh
DATABASE="XXXX"
TABLE_NAME="XXXX"
SERVER-"XXXX"		#在Sybase安装目录下的interfaces文件
PASSWORD="XXXX"
#set log name
pid=$$
logName=$(basename $0)
logFile=/**/**/${logName}${pid}.log
echo "start"				                                >$logFile
if [ -e $SYBASE_SH ];then
	source $SYBASE_SH
else
	echo "Cannot find ${SYBASE_SH}"	                                >>$logFile
fi
if [ -e "bcp文件" ];then
	dataRows=$(grep -c "" bcp文件)   #统计行数
	bcp_rs=$(bcp ${DATABASE}.dbo.${TABLE_NAME} in bcp文件 -c -Jsjis -t"," -Y -S${SERVER} -U${USER} -P${PASSWORD})
	case ${bcp_rs} in
	*"${dataRows}"*"copied"*)
		echo "import succeeded:bcp文件${dataRows}rows"		>>$logFile
		;;
	*)
		echo "import failed:bcp文件"				>>$logFile
		echo $bcp_rs						>>$logFile
		exit 1;
		;;

	esac
fi

isql -S${SERVER} -U${USER} -P{PASSWORD}<<EOF
use $DATABASE
go
select ****
......
go
......
go
quit
EOF
rtnSql=$?
if [ $rtnSql -ne 0 ];then
	echo "deal with data with some error!!"				>>$logFile
fi

45循环目录文件
declare -a files    #数组定义
files=$(ls 目录)
for file in ${files[@]}
do
	....
done

46 读文件
while read -r line
do
	#cut
	outDataSub=$(expr shbstr "$line" 1 6)
	#split by ";"
	IFS=\;
	cols=($line)
	declare cols
	echo ${cols[0]}
	echo ${cols[1]}
	#IFS return space
	IFS=
	
	#trim
	convar=$(echo "${cols[1]}" | grep -o "[^ \t]\+\( \+[^ \t]\+\)*")
	echo $convar
	
	#output file
	echo ${cols[1]} >> $outputfile
done < *.txt

47 执行命令
``或$()

48 随机数
$RANDOM 0~32768
#随机0-9
decare -i number=$RANDOM*10/32768

49 键盘输入
read -p "提示语" -t 30 变量

50 定义数组
declare [-aixr] variable
 -a 数组
 -i 整数
 -x 环境变量，等于export
 -r readonly
 
50 取消环境变量，变成自定义变量
declare +x 变量

51 列出变量类型
declare -p 变量

52 set设定
set -u 变量使用前先定义
set -v 显示原始信息
set -x 执行前显示命令
set -C 文件存在时，使用>不覆盖

53 信息输出，错误输出
都输出文件
find /home -name .bashrc > list 2 > &1
find /home -name .bashrc & > list
丢弃错误信息
find /home -name .bashrc > list 2 > /dev/null

54 列切(cut)
cut -d '分隔字符' fields
cut -c 字符范围

55 行取(grep)
-a 将binary文件以text文件的方式查找
-C 计算找到次数
-i 忽略大小写
-n 行号
-v 反选
--color=auto 上色

55 排序(sort)
-f 忽略大小写
-b 忽略最前面空格
-n 纯数字排序
-M 月份名字排序
-r 反向
-u 合并相同
-t 分隔符，默认【Tab】
-k field排序，和-t一起使用

56 分组(uniq)
-i 忽略大小写
-C 进行计数

57 统计(wc)
-l 行数
-w 字数
-m 字符数

58 双向重定向（屏幕与文件）
tee

59 数字运算
$((运算))

60 运行参数
sh [-nvx] **.sh
-n 查语法
-v 执行前，显示到屏幕
-x 将使用到的script显示到屏幕

70 ftp
ftp -nv << ftpend > $ftp_log
	open $HOST
	user $USER_NAME $PASSWORD
	bin
	CD $DIR
	put XXX XXX
	bye
ftpend
#266 Transfer complete
egrep '^266' $ftp_log
put_end_sts=$?
#check cd error
grep "No such file or directory" $ftp_log
cd_end_sts=$?
if [ $put_end_sts != 0 ] || [ $cd_end_sts ==0 ]
then
	echo "ftp error"
fi

71 sftp
sftp hostname << sftpend
	cd XXX
	put XXX XXX
	get XXX
	bye
sftpend

72 ssh 远程访问
ssh hostname << END_SSH
	命令
	ls
	pwd
	...
END_SSH

73 quota
显示磁盘配额
